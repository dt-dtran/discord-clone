generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]
  reactions Reaction[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

}

enum MessageSource {
  USER
  SYSTEM
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  type MessageSource @default(USER)

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade )

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  reactions Reaction[]
  reactionCounts ReactionCount[]

  pinned Boolean @default(false)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields:[memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields:[memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions Reaction[]
  reactionCounts ReactionCount[]

  pinned Boolean @default(false)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Reaction {
  id String @id @default(uuid())
  emoji String
  type String?

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  messageId String
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  directMessageId String
  directMessage DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  reactionCountId String?
  reactionCount ReactionCount? @relation(fields: [reactionCountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([messageId])
  @@index([directMessageId])
  @@index([reactionCountId])

  @@unique([emoji, messageId, memberId])
  @@unique([emoji, directMessageId, memberId])
}

model ReactionCount {
  id String @id @default(uuid())
  emoji String
  count Int @default(0)

  messageId String
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  directMessageId String
  directMessage DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  reactions Reaction[]

  @@index([messageId])
  @@index([directMessageId])
  @@unique([emoji, messageId])
  @@unique([emoji, directMessageId])
}
